Day1: 
Leetcode 217. Contains Duplicate
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Example 1:
Input: nums = [1,2,3,1]
Output: true
Example 2:
Input: nums = [1,2,3,4]
Output: false
----------------------------------------
// Time complexity: O(n)
// Space complexity: O(n)
var containsDuplicate = function(nums) {
    const s = new Set(nums); 
    return s.size !== nums.length
}
----------------------------------------
var containsDuplicate = function(nums) {
    nums.sort((a,b) => a-b);
    for(let i = 0; i <= nums.length-1; i++){
        if(nums[i] === nums[i+1]){
            return true
        }
    }
    return false
};
----------------------------------------
var containsDuplicate = function(nums) {
    const s = new Set(nums);
    if(s.size !== nums.length)
        return true
    return false;
   
};
----------------------------------------
var containsDuplicate = function (nums) {
  return [...new Set(nums)].length !== nums.length;
};
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day 2:
Generate Fibonacci series:

function generateFibonacci(n) {
  const fibonacciSeries = [0, 1];
  for (let i = 2; i < n; i++) {
    const nextFibonacci = fibonacciSeries[i - 2] + fibonacciSeries[i - 1];
    fibonacciSeries.push(nextFibonacci);
  }
  return fibonacciSeries;
}
const fibonacciOutput = generateFibonacci(6);
console.log(fibonacciOutput);
-------------------------------------------------------------------------------------------------------------------------------------------------------
Day 3: Two Sum
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

var twoSum = function(nums, target) {
    for(i=0;i<nums.length;i++){
        for(j=i+1;j<nums.length;j++){
            if(nums[i]+nums[j]===target){
                let output = [i,j];
                return output;
            }
        }
    }
};
----------------------------------------
function twoSum(arr, target) {
  let obj = {};

  for (let i = 0; i < arr.length; i++) {
    if (target - arr[i] in obj) {
      return [obj[target-arr[i]], i];
    } else {
      obj[arr[i]] = i;
    }
  }
  return [];
};
----------------------------------------
function twoSum(nums, target) {
  let vals = {};

  for (let i = 0; i < nums.length; i++) {
    if (target - nums[i] in vals) {
      return [vals[target-nums[i]], i];
    } else {
      vals[nums[i]] = i;
    }
  }
  return [];
};
----------------------------------------
var twoSum = function(nums, target) {
       const map = {};
    for(let i = 0; i < nums.length; i++){
        const diff = target - nums[i];
        if(map.hasOwnProperty(diff)){
           return [map[diff], i];
			break;
        }
        map[nums[i]] = i;
    }
    
    return result;
};
------------------------------------------------------------------------------------------------------------------------------------------------
Day 4:
Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3]
Output: 3

var majorityElement = function(nums) {
    let map = {}
    for(let item of nums){
        if(!map[item]) {
            map[item] = 1;
        } else {
            map[item]++;
        }
        if (map[item] >= nums.length/2) return item
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------
Day 5: Find Words Containing Character
Input: words = ["leet","code"], x = "e"
Output: [0,1]
Explanation: "e" occurs in both words: "leet", and "code". Hence, we return indices 0 and 1.

/*var findWordsContaining = function(words, x) {
    return words.reduce((acc, curr, i) => 
                            curr.includes(x)
                            ? [...acc, i]
                            : acc, 
                        [])
};

var findWordsContaining = function(words, x) {
    return words.reduce((acc, curr, i) => 
                            curr.indexOf(x) > -1 
                            ? [...acc, i]
                            : acc, 
                        [])
};

const findWordsContaining = (words, x) => {
  const res = [];
  words.forEach((word, index) => {
    if (word.includes(x)) res.push(index);
  });
  return res;
};

function findWordsContaining(words, x) {
    let indices = [];
    for (let i = 0; i < words.length; i++) {
        if (words[i].includes(x)) {
            indices.push(i);
        }
    }
    return indices;
} */

var findWordsContaining = function(words, x) {
    let out = []
    words.map((word , index)=>{
        if(word.includes(x)){
            out.push(index)
        }
    })
    return out
};
----------------------------------------------------------------------------------------------------------------------------------------------------
Day 6: Running Sum of 1d Array

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

/*var runningSum = function(nums) {
    let result=[]; let sum=0;
    for(let i=0; i<nums.length; i++){
      sum=sum+nums[i]
      result.push(sum);
    }
    return result;  
}*/

const runningSum = nums => {
  let sum = 0;
  return nums.map(num => sum += num);
};
----------------------------------------------------------------------------------------------------------------------------------------------------
Day 7: Number of Good Pairs

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

/*var numIdenticalPairs = function(nums) {
  let pair=0
  for(let i=0;i<nums.length;i++){
    for(let j=i+1; j<nums.length;j++){
       if(nums[i] === nums[j]){
         pair++;
       }
    }
  }  
  return pair;
};*/

var numIdenticalPairs = function(nums) {
    let count = {};
    let result = 0;

    for (let num of nums) {
        if (num in count) {
            result += count[num];
            count[num]++;
        } else {
            count[num] = 1;
        }
    }

    return result;
};
------------------------------------------------------------------------------------------------------------------------------------------------------
Day 8: Check If Two String Arrays are Equivalent

Input: word1 = ["ab", "c"], word2 = ["a", "bc"]
Output: true
Explanation:
word1 represents string "ab" + "c" -> "abc"
word2 represents string "a" + "bc" -> "abc"
The strings are the same, so return true.

/*var arrayStringsAreEqual = function(word1, word2) {
        let left = ""; // Initialize left and right to empty strings
        let right = "";

        // Concatenate strings in word1
        for (let i = 0; i < word1.length; i++) {
            left += word1[i];
        }

        // Concatenate strings in word2
        for (let i = 0; i < word2.length; i++) {
            right += word2[i];
        }

        // Use equals() method to compare strings
        return left === right;

};*/

function arrayStringsAreEqual(word1, word2) {
    let s1 = word1.join('');
    let s2 = word2.join('');

    return s1 === s2;
}
------------------------------------------------------------------------------------------------------------------------------------------------------
